#!/usr/bin/awk -f
# this serves to parse xcolor-style color specifications
# like: blue!20 ; blue!20!red ; blue!20!red!30!green!30!white!20
# #0000ff!20

# The actual parsing is quite slow (~80% of the time).
# We memoize (using cached) to go faster.
# String functions are slow.

BEGIN{
	lib = "/home/e55/src/neatroff/lib/color"
	getcolorlib(lib)
	for (N = 0; N < 16; N++) {
		H[sprintf("%x", N)] = H[sprintf("%X", N)] = N
	}
}

function getcolorlib(lib,	a) {
	a = FS
	FS="\t"
	while (getline <lib) {
		color[$1, "r"] = $2
		color[$1, "g"] = $3
		color[$1, "b"] = $4
	}
	close(lib)
	FS = a
}

function max(x,y) { return x > y ? x : y; }

function parsehex(h,	i, out) {
	out = 0
	for (i = 1; i <= length(h); i++)
		out = out*16 + H[substr(h, i, 1)]
	return out
}

function parsecol(col, ar,	i) {
	if (substr(col, 1, 1) == "-") {
		col = substr(col, 2)
		i = 1
	}
	ar[1] = ar[2] = ar[3] = 0
	if ((col, "r") in color) {
		ar[1] = color[col, "r"]
		ar[2] = color[col, "g"]
		ar[3] = color[col, "b"]
	} else if (col ~ /^#/) {
		ar[1] = parsehex(substr(col, 2, 2))
		ar[2] = parsehex(substr(col, 4, 2))
		ar[3] = parsehex(substr(col, 6, 2))
	}

	if (i == 1) {
		ar[1] = 255 - ar[1]
		ar[2] = 255 - ar[2]
		ar[3] = 255 - ar[3]
	}
}

function coldesc(s,	sum, i, a, c, _r, _g, _b) {
	if (s in cached) {
		return cached[s]
	}
	_r = _g = _b = 0
	split(s, a, "!")
	for (i = 2; i <= length(a); i += 2) {
		sum += a[i]
	}
	if (length(a) % 2 == 1) {
		a[length(a)+1] = 100 - sum
		sum += 100 - sum
	}
	if (sum < 100) {
		a[length(a)+1] = "white"
		a[length(a)+1] = 100 - sum
		sum += 100 - sum
	}
	if (sum > 100) {
		for (i = 2; i <= length(a); i += 2)
			a[i] = 100*a[i]/sum
	}
	for (i = 1; i <= length(a); i++) {
		parsecol(a[i], c)
		_r = _r + c[1]*a[i+1]/100
		_g = _g + c[2]*a[i+1]/100
		_b = _b + c[3]*a[i+1]/100
		i++
	}
	cached[s] = sprintf("#%02x%02x%02x", _r, _g, _b)
	return cached[s]
}

/^\.colorlib /{
	getcolorlib(lib "." $2)
	next
}

/^\.cl /{
	$0 = ".cl " coldesc($2)
	print
	next
}

/^\.dc /{
	color[$2, "r"] = parsehex(substr($3, 2, 2))
	color[$2, "g"] = parsehex(substr($3, 4, 2))
	color[$2, "b"] = parsehex(substr($3, 6, 2))
}

/^\.rc /{
	delete color[$2, "r"]
	delete color[$2, "g"]
	delete color[$2, "b"]
}

/color/{
	while (match($0, "\\\\\\*\\[color [^]]*\\]")) {
		$0 = substr($0, 1, RSTART-1) coldesc(substr($0, RSTART+9, RLENGTH-10)) substr($0, RSTART+RLENGTH)
	}
}

/\\m/ {
	p = 1
	while (match(substr($0, p), "\\\\m\\[[^]]+\\]")) {
		$0 = substr($0, 1, p-1+RSTART+2) coldesc(substr($0, p-1+RSTART+3, RLENGTH-4)) substr($0, p-1+RSTART+RLENGTH-1)
		p = p-1+RSTART+RLENGTH
	}
}

1
